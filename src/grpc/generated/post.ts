// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Int32Value } from "./google/protobuf/wrappers";

export const protobufPackage = "social.post.v1";

export interface User {
  id: string;
  name: string;
  avatar: string;
  title?: string | undefined;
  points: number | undefined;
}

export interface ImageTransform {
  rotation: number;
  flipH: boolean;
  flipV: boolean;
  zoom: number;
  straighten: number;
  aspectRatio: string;
  filter: string;
  brightness: number;
  contrast: number;
  saturation: number;
  temperature: number;
  highlights: number;
  shadows: number;
  altText: string;
}

/** Add video transform fields if needed */
export interface VideoTransform {
}

export interface PollOption {
  id: number;
  text: string;
}

export interface Poll {
  question: string;
  options: PollOption[];
  durationDays: number;
}

export interface Media {
  id: string;
  type: string;
  name: string;
  url: string;
  taggedUsers: User[];
  imageTransform?: ImageTransform | undefined;
  videoTransform?: VideoTransform | undefined;
}

export interface Post {
  content: string;
  media: Media[];
  poll?: Poll | undefined;
  visibility: string;
  commentControl: string;
}

export interface CreatePostRequest {
  post: Post | undefined;
}

export interface CreatePostResponse {
  message: string;
}

function createBaseUser(): User {
  return { id: "", name: "", avatar: "", title: undefined, points: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.title !== undefined) {
      writer.uint32(34).string(message.title);
    }
    if (message.points !== undefined) {
      Int32Value.encode({ value: message.points! }, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.points = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      points: isSet(object.points) ? Number(object.points) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.points !== undefined) {
      obj.points = message.points;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.avatar = object.avatar ?? "";
    message.title = object.title ?? undefined;
    message.points = object.points ?? undefined;
    return message;
  },
};

function createBaseImageTransform(): ImageTransform {
  return {
    rotation: 0,
    flipH: false,
    flipV: false,
    zoom: 0,
    straighten: 0,
    aspectRatio: "",
    filter: "",
    brightness: 0,
    contrast: 0,
    saturation: 0,
    temperature: 0,
    highlights: 0,
    shadows: 0,
    altText: "",
  };
}

export const ImageTransform: MessageFns<ImageTransform> = {
  encode(message: ImageTransform, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rotation !== 0) {
      writer.uint32(9).double(message.rotation);
    }
    if (message.flipH !== false) {
      writer.uint32(16).bool(message.flipH);
    }
    if (message.flipV !== false) {
      writer.uint32(24).bool(message.flipV);
    }
    if (message.zoom !== 0) {
      writer.uint32(33).double(message.zoom);
    }
    if (message.straighten !== 0) {
      writer.uint32(41).double(message.straighten);
    }
    if (message.aspectRatio !== "") {
      writer.uint32(50).string(message.aspectRatio);
    }
    if (message.filter !== "") {
      writer.uint32(58).string(message.filter);
    }
    if (message.brightness !== 0) {
      writer.uint32(65).double(message.brightness);
    }
    if (message.contrast !== 0) {
      writer.uint32(73).double(message.contrast);
    }
    if (message.saturation !== 0) {
      writer.uint32(81).double(message.saturation);
    }
    if (message.temperature !== 0) {
      writer.uint32(89).double(message.temperature);
    }
    if (message.highlights !== 0) {
      writer.uint32(97).double(message.highlights);
    }
    if (message.shadows !== 0) {
      writer.uint32(105).double(message.shadows);
    }
    if (message.altText !== "") {
      writer.uint32(114).string(message.altText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageTransform {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.rotation = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.flipH = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.flipV = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.zoom = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.straighten = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.aspectRatio = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.brightness = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.contrast = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.saturation = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 97) {
            break;
          }

          message.highlights = reader.double();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.shadows = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.altText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageTransform {
    return {
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      flipH: isSet(object.flipH) ? globalThis.Boolean(object.flipH) : false,
      flipV: isSet(object.flipV) ? globalThis.Boolean(object.flipV) : false,
      zoom: isSet(object.zoom) ? globalThis.Number(object.zoom) : 0,
      straighten: isSet(object.straighten) ? globalThis.Number(object.straighten) : 0,
      aspectRatio: isSet(object.aspectRatio) ? globalThis.String(object.aspectRatio) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      brightness: isSet(object.brightness) ? globalThis.Number(object.brightness) : 0,
      contrast: isSet(object.contrast) ? globalThis.Number(object.contrast) : 0,
      saturation: isSet(object.saturation) ? globalThis.Number(object.saturation) : 0,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      highlights: isSet(object.highlights) ? globalThis.Number(object.highlights) : 0,
      shadows: isSet(object.shadows) ? globalThis.Number(object.shadows) : 0,
      altText: isSet(object.altText) ? globalThis.String(object.altText) : "",
    };
  },

  toJSON(message: ImageTransform): unknown {
    const obj: any = {};
    if (message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.flipH !== false) {
      obj.flipH = message.flipH;
    }
    if (message.flipV !== false) {
      obj.flipV = message.flipV;
    }
    if (message.zoom !== 0) {
      obj.zoom = message.zoom;
    }
    if (message.straighten !== 0) {
      obj.straighten = message.straighten;
    }
    if (message.aspectRatio !== "") {
      obj.aspectRatio = message.aspectRatio;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.brightness !== 0) {
      obj.brightness = message.brightness;
    }
    if (message.contrast !== 0) {
      obj.contrast = message.contrast;
    }
    if (message.saturation !== 0) {
      obj.saturation = message.saturation;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.highlights !== 0) {
      obj.highlights = message.highlights;
    }
    if (message.shadows !== 0) {
      obj.shadows = message.shadows;
    }
    if (message.altText !== "") {
      obj.altText = message.altText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageTransform>, I>>(base?: I): ImageTransform {
    return ImageTransform.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageTransform>, I>>(object: I): ImageTransform {
    const message = createBaseImageTransform();
    message.rotation = object.rotation ?? 0;
    message.flipH = object.flipH ?? false;
    message.flipV = object.flipV ?? false;
    message.zoom = object.zoom ?? 0;
    message.straighten = object.straighten ?? 0;
    message.aspectRatio = object.aspectRatio ?? "";
    message.filter = object.filter ?? "";
    message.brightness = object.brightness ?? 0;
    message.contrast = object.contrast ?? 0;
    message.saturation = object.saturation ?? 0;
    message.temperature = object.temperature ?? 0;
    message.highlights = object.highlights ?? 0;
    message.shadows = object.shadows ?? 0;
    message.altText = object.altText ?? "";
    return message;
  },
};

function createBaseVideoTransform(): VideoTransform {
  return {};
}

export const VideoTransform: MessageFns<VideoTransform> = {
  encode(_: VideoTransform, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoTransform {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoTransform {
    return {};
  },

  toJSON(_: VideoTransform): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoTransform>, I>>(base?: I): VideoTransform {
    return VideoTransform.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoTransform>, I>>(_: I): VideoTransform {
    const message = createBaseVideoTransform();
    return message;
  },
};

function createBasePollOption(): PollOption {
  return { id: 0, text: "" };
}

export const PollOption: MessageFns<PollOption> = {
  encode(message: PollOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollOption {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: PollOption): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollOption>, I>>(base?: I): PollOption {
    return PollOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollOption>, I>>(object: I): PollOption {
    const message = createBasePollOption();
    message.id = object.id ?? 0;
    message.text = object.text ?? "";
    return message;
  },
};

function createBasePoll(): Poll {
  return { question: "", options: [], durationDays: 0 };
}

export const Poll: MessageFns<Poll> = {
  encode(message: Poll, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.question !== "") {
      writer.uint32(10).string(message.question);
    }
    for (const v of message.options) {
      PollOption.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.durationDays !== 0) {
      writer.uint32(24).int32(message.durationDays);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Poll {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.question = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.options.push(PollOption.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.durationDays = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Poll {
    return {
      question: isSet(object.question) ? globalThis.String(object.question) : "",
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => PollOption.fromJSON(e)) : [],
      durationDays: isSet(object.durationDays) ? globalThis.Number(object.durationDays) : 0,
    };
  },

  toJSON(message: Poll): unknown {
    const obj: any = {};
    if (message.question !== "") {
      obj.question = message.question;
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => PollOption.toJSON(e));
    }
    if (message.durationDays !== 0) {
      obj.durationDays = Math.round(message.durationDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Poll>, I>>(base?: I): Poll {
    return Poll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Poll>, I>>(object: I): Poll {
    const message = createBasePoll();
    message.question = object.question ?? "";
    message.options = object.options?.map((e) => PollOption.fromPartial(e)) || [];
    message.durationDays = object.durationDays ?? 0;
    return message;
  },
};

function createBaseMedia(): Media {
  return { id: "", type: "", name: "", url: "", taggedUsers: [], imageTransform: undefined, videoTransform: undefined };
}

export const Media: MessageFns<Media> = {
  encode(message: Media, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    for (const v of message.taggedUsers) {
      User.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.imageTransform !== undefined) {
      ImageTransform.encode(message.imageTransform, writer.uint32(50).fork()).join();
    }
    if (message.videoTransform !== undefined) {
      VideoTransform.encode(message.videoTransform, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Media {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.taggedUsers.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.imageTransform = ImageTransform.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.videoTransform = VideoTransform.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Media {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      taggedUsers: globalThis.Array.isArray(object?.taggedUsers)
        ? object.taggedUsers.map((e: any) => User.fromJSON(e))
        : [],
      imageTransform: isSet(object.imageTransform) ? ImageTransform.fromJSON(object.imageTransform) : undefined,
      videoTransform: isSet(object.videoTransform) ? VideoTransform.fromJSON(object.videoTransform) : undefined,
    };
  },

  toJSON(message: Media): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.taggedUsers?.length) {
      obj.taggedUsers = message.taggedUsers.map((e) => User.toJSON(e));
    }
    if (message.imageTransform !== undefined) {
      obj.imageTransform = ImageTransform.toJSON(message.imageTransform);
    }
    if (message.videoTransform !== undefined) {
      obj.videoTransform = VideoTransform.toJSON(message.videoTransform);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Media>, I>>(base?: I): Media {
    return Media.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Media>, I>>(object: I): Media {
    const message = createBaseMedia();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.name = object.name ?? "";
    message.url = object.url ?? "";
    message.taggedUsers = object.taggedUsers?.map((e) => User.fromPartial(e)) || [];
    message.imageTransform = (object.imageTransform !== undefined && object.imageTransform !== null)
      ? ImageTransform.fromPartial(object.imageTransform)
      : undefined;
    message.videoTransform = (object.videoTransform !== undefined && object.videoTransform !== null)
      ? VideoTransform.fromPartial(object.videoTransform)
      : undefined;
    return message;
  },
};

function createBasePost(): Post {
  return { content: "", media: [], poll: undefined, visibility: "", commentControl: "" };
}

export const Post: MessageFns<Post> = {
  encode(message: Post, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    for (const v of message.media) {
      Media.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.poll !== undefined) {
      Poll.encode(message.poll, writer.uint32(26).fork()).join();
    }
    if (message.visibility !== "") {
      writer.uint32(34).string(message.visibility);
    }
    if (message.commentControl !== "") {
      writer.uint32(42).string(message.commentControl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Post {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.media.push(Media.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.poll = Poll.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.visibility = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.commentControl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Post {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => Media.fromJSON(e)) : [],
      poll: isSet(object.poll) ? Poll.fromJSON(object.poll) : undefined,
      visibility: isSet(object.visibility) ? globalThis.String(object.visibility) : "",
      commentControl: isSet(object.commentControl) ? globalThis.String(object.commentControl) : "",
    };
  },

  toJSON(message: Post): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.media?.length) {
      obj.media = message.media.map((e) => Media.toJSON(e));
    }
    if (message.poll !== undefined) {
      obj.poll = Poll.toJSON(message.poll);
    }
    if (message.visibility !== "") {
      obj.visibility = message.visibility;
    }
    if (message.commentControl !== "") {
      obj.commentControl = message.commentControl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Post>, I>>(base?: I): Post {
    return Post.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Post>, I>>(object: I): Post {
    const message = createBasePost();
    message.content = object.content ?? "";
    message.media = object.media?.map((e) => Media.fromPartial(e)) || [];
    message.poll = (object.poll !== undefined && object.poll !== null) ? Poll.fromPartial(object.poll) : undefined;
    message.visibility = object.visibility ?? "";
    message.commentControl = object.commentControl ?? "";
    return message;
  },
};

function createBaseCreatePostRequest(): CreatePostRequest {
  return { post: undefined };
}

export const CreatePostRequest: MessageFns<CreatePostRequest> = {
  encode(message: CreatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post !== undefined) {
      Post.encode(message.post, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post = Post.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostRequest {
    return { post: isSet(object.post) ? Post.fromJSON(object.post) : undefined };
  },

  toJSON(message: CreatePostRequest): unknown {
    const obj: any = {};
    if (message.post !== undefined) {
      obj.post = Post.toJSON(message.post);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostRequest>, I>>(base?: I): CreatePostRequest {
    return CreatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostRequest>, I>>(object: I): CreatePostRequest {
    const message = createBaseCreatePostRequest();
    message.post = (object.post !== undefined && object.post !== null) ? Post.fromPartial(object.post) : undefined;
    return message;
  },
};

function createBaseCreatePostResponse(): CreatePostResponse {
  return { message: "" };
}

export const CreatePostResponse: MessageFns<CreatePostResponse> = {
  encode(message: CreatePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: CreatePostResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostResponse>, I>>(base?: I): CreatePostResponse {
    return CreatePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostResponse>, I>>(object: I): CreatePostResponse {
    const message = createBaseCreatePostResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type PostServiceService = typeof PostServiceService;
export const PostServiceService = {
  createPost: {
    path: "/social.post.v1.PostService/CreatePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePostRequest): Buffer => Buffer.from(CreatePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreatePostRequest => CreatePostRequest.decode(value),
    responseSerialize: (value: CreatePostResponse): Buffer => Buffer.from(CreatePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreatePostResponse => CreatePostResponse.decode(value),
  },
} as const;

export interface PostServiceServer extends UntypedServiceImplementation {
  createPost: handleUnaryCall<CreatePostRequest, CreatePostResponse>;
}

export interface PostServiceClient extends Client {
  createPost(
    request: CreatePostRequest,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
  createPost(
    request: CreatePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
  createPost(
    request: CreatePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
}

export const PostServiceClient = makeGenericClientConstructor(
  PostServiceService,
  "social.post.v1.PostService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PostServiceClient;
  service: typeof PostServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
