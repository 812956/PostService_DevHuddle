"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostServiceClient = exports.PostServiceService = exports.CreatePostResponse = exports.CreatePostRequest = exports.Media = exports.Transform = exports.Poll = exports.PollOption = exports.VideoTransform = exports.ImageTransform = exports.User = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const wrappers_1 = require("./google/protobuf/wrappers");
exports.protobufPackage = "social.post.v1";
function createBaseUser() {
    return { id: "", name: "", avatar: "", title: undefined, points: undefined };
}
exports.User = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        if (message.title !== undefined) {
            writer.uint32(34).string(message.title);
        }
        if (message.points !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.points }, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.points = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
            points: isSet(object.points) ? Number(object.points) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.points !== undefined) {
            obj.points = message.points;
        }
        return obj;
    },
    create(base) {
        return exports.User.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.avatar = object.avatar ?? "";
        message.title = object.title ?? undefined;
        message.points = object.points ?? undefined;
        return message;
    },
};
function createBaseImageTransform() {
    return {
        rotation: 0,
        flipH: false,
        flipV: false,
        zoom: 0,
        straighten: 0,
        aspectRatio: "",
        filter: "",
        brightness: 0,
        contrast: 0,
        saturation: 0,
        temperature: 0,
        highlights: 0,
        shadows: 0,
        altText: "",
    };
}
exports.ImageTransform = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rotation !== 0) {
            writer.uint32(9).double(message.rotation);
        }
        if (message.flipH !== false) {
            writer.uint32(16).bool(message.flipH);
        }
        if (message.flipV !== false) {
            writer.uint32(24).bool(message.flipV);
        }
        if (message.zoom !== 0) {
            writer.uint32(33).double(message.zoom);
        }
        if (message.straighten !== 0) {
            writer.uint32(41).double(message.straighten);
        }
        if (message.aspectRatio !== "") {
            writer.uint32(50).string(message.aspectRatio);
        }
        if (message.filter !== "") {
            writer.uint32(58).string(message.filter);
        }
        if (message.brightness !== 0) {
            writer.uint32(65).double(message.brightness);
        }
        if (message.contrast !== 0) {
            writer.uint32(73).double(message.contrast);
        }
        if (message.saturation !== 0) {
            writer.uint32(81).double(message.saturation);
        }
        if (message.temperature !== 0) {
            writer.uint32(89).double(message.temperature);
        }
        if (message.highlights !== 0) {
            writer.uint32(97).double(message.highlights);
        }
        if (message.shadows !== 0) {
            writer.uint32(105).double(message.shadows);
        }
        if (message.altText !== "") {
            writer.uint32(114).string(message.altText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageTransform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.rotation = reader.double();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.flipH = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.flipV = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 33) {
                        break;
                    }
                    message.zoom = reader.double();
                    continue;
                }
                case 5: {
                    if (tag !== 41) {
                        break;
                    }
                    message.straighten = reader.double();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.aspectRatio = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 65) {
                        break;
                    }
                    message.brightness = reader.double();
                    continue;
                }
                case 9: {
                    if (tag !== 73) {
                        break;
                    }
                    message.contrast = reader.double();
                    continue;
                }
                case 10: {
                    if (tag !== 81) {
                        break;
                    }
                    message.saturation = reader.double();
                    continue;
                }
                case 11: {
                    if (tag !== 89) {
                        break;
                    }
                    message.temperature = reader.double();
                    continue;
                }
                case 12: {
                    if (tag !== 97) {
                        break;
                    }
                    message.highlights = reader.double();
                    continue;
                }
                case 13: {
                    if (tag !== 105) {
                        break;
                    }
                    message.shadows = reader.double();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.altText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
            flipH: isSet(object.flipH) ? globalThis.Boolean(object.flipH) : false,
            flipV: isSet(object.flipV) ? globalThis.Boolean(object.flipV) : false,
            zoom: isSet(object.zoom) ? globalThis.Number(object.zoom) : 0,
            straighten: isSet(object.straighten) ? globalThis.Number(object.straighten) : 0,
            aspectRatio: isSet(object.aspectRatio) ? globalThis.String(object.aspectRatio) : "",
            filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
            brightness: isSet(object.brightness) ? globalThis.Number(object.brightness) : 0,
            contrast: isSet(object.contrast) ? globalThis.Number(object.contrast) : 0,
            saturation: isSet(object.saturation) ? globalThis.Number(object.saturation) : 0,
            temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
            highlights: isSet(object.highlights) ? globalThis.Number(object.highlights) : 0,
            shadows: isSet(object.shadows) ? globalThis.Number(object.shadows) : 0,
            altText: isSet(object.altText) ? globalThis.String(object.altText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rotation !== 0) {
            obj.rotation = message.rotation;
        }
        if (message.flipH !== false) {
            obj.flipH = message.flipH;
        }
        if (message.flipV !== false) {
            obj.flipV = message.flipV;
        }
        if (message.zoom !== 0) {
            obj.zoom = message.zoom;
        }
        if (message.straighten !== 0) {
            obj.straighten = message.straighten;
        }
        if (message.aspectRatio !== "") {
            obj.aspectRatio = message.aspectRatio;
        }
        if (message.filter !== "") {
            obj.filter = message.filter;
        }
        if (message.brightness !== 0) {
            obj.brightness = message.brightness;
        }
        if (message.contrast !== 0) {
            obj.contrast = message.contrast;
        }
        if (message.saturation !== 0) {
            obj.saturation = message.saturation;
        }
        if (message.temperature !== 0) {
            obj.temperature = message.temperature;
        }
        if (message.highlights !== 0) {
            obj.highlights = message.highlights;
        }
        if (message.shadows !== 0) {
            obj.shadows = message.shadows;
        }
        if (message.altText !== "") {
            obj.altText = message.altText;
        }
        return obj;
    },
    create(base) {
        return exports.ImageTransform.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImageTransform();
        message.rotation = object.rotation ?? 0;
        message.flipH = object.flipH ?? false;
        message.flipV = object.flipV ?? false;
        message.zoom = object.zoom ?? 0;
        message.straighten = object.straighten ?? 0;
        message.aspectRatio = object.aspectRatio ?? "";
        message.filter = object.filter ?? "";
        message.brightness = object.brightness ?? 0;
        message.contrast = object.contrast ?? 0;
        message.saturation = object.saturation ?? 0;
        message.temperature = object.temperature ?? 0;
        message.highlights = object.highlights ?? 0;
        message.shadows = object.shadows ?? 0;
        message.altText = object.altText ?? "";
        return message;
    },
};
function createBaseVideoTransform() {
    return {};
}
exports.VideoTransform = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoTransform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.VideoTransform.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseVideoTransform();
        return message;
    },
};
function createBasePollOption() {
    return { id: 0, text: "" };
}
exports.PollOption = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePollOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.PollOption.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePollOption();
        message.id = object.id ?? 0;
        message.text = object.text ?? "";
        return message;
    },
};
function createBasePoll() {
    return { question: "", options: [], durationDays: 0 };
}
exports.Poll = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.question !== "") {
            writer.uint32(10).string(message.question);
        }
        for (const v of message.options) {
            exports.PollOption.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.durationDays !== 0) {
            writer.uint32(24).int32(message.durationDays);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePoll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.question = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.options.push(exports.PollOption.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.durationDays = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            question: isSet(object.question) ? globalThis.String(object.question) : "",
            options: globalThis.Array.isArray(object?.options) ? object.options.map((e) => exports.PollOption.fromJSON(e)) : [],
            durationDays: isSet(object.durationDays) ? globalThis.Number(object.durationDays) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.question !== "") {
            obj.question = message.question;
        }
        if (message.options?.length) {
            obj.options = message.options.map((e) => exports.PollOption.toJSON(e));
        }
        if (message.durationDays !== 0) {
            obj.durationDays = Math.round(message.durationDays);
        }
        return obj;
    },
    create(base) {
        return exports.Poll.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePoll();
        message.question = object.question ?? "";
        message.options = object.options?.map((e) => exports.PollOption.fromPartial(e)) || [];
        message.durationDays = object.durationDays ?? 0;
        return message;
    },
};
function createBaseTransform() {
    return { image: undefined, video: undefined };
}
exports.Transform = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.image !== undefined) {
            exports.ImageTransform.encode(message.image, writer.uint32(10).fork()).join();
        }
        if (message.video !== undefined) {
            exports.VideoTransform.encode(message.video, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.image = exports.ImageTransform.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.video = exports.VideoTransform.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            image: isSet(object.image) ? exports.ImageTransform.fromJSON(object.image) : undefined,
            video: isSet(object.video) ? exports.VideoTransform.fromJSON(object.video) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.image !== undefined) {
            obj.image = exports.ImageTransform.toJSON(message.image);
        }
        if (message.video !== undefined) {
            obj.video = exports.VideoTransform.toJSON(message.video);
        }
        return obj;
    },
    create(base) {
        return exports.Transform.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTransform();
        message.image = (object.image !== undefined && object.image !== null)
            ? exports.ImageTransform.fromPartial(object.image)
            : undefined;
        message.video = (object.video !== undefined && object.video !== null)
            ? exports.VideoTransform.fromPartial(object.video)
            : undefined;
        return message;
    },
};
function createBaseMedia() {
    return { id: "", type: "", name: "", url: "", taggedUsers: [], transform: undefined };
}
exports.Media = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.url !== "") {
            writer.uint32(34).string(message.url);
        }
        for (const v of message.taggedUsers) {
            exports.User.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.transform !== undefined) {
            exports.Transform.encode(message.transform, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMedia();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.taggedUsers.push(exports.User.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.transform = exports.Transform.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            taggedUsers: globalThis.Array.isArray(object?.taggedUsers)
                ? object.taggedUsers.map((e) => exports.User.fromJSON(e))
                : [],
            transform: isSet(object.transform) ? exports.Transform.fromJSON(object.transform) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.taggedUsers?.length) {
            obj.taggedUsers = message.taggedUsers.map((e) => exports.User.toJSON(e));
        }
        if (message.transform !== undefined) {
            obj.transform = exports.Transform.toJSON(message.transform);
        }
        return obj;
    },
    create(base) {
        return exports.Media.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMedia();
        message.id = object.id ?? "";
        message.type = object.type ?? "";
        message.name = object.name ?? "";
        message.url = object.url ?? "";
        message.taggedUsers = object.taggedUsers?.map((e) => exports.User.fromPartial(e)) || [];
        message.transform = (object.transform !== undefined && object.transform !== null)
            ? exports.Transform.fromPartial(object.transform)
            : undefined;
        return message;
    },
};
function createBaseCreatePostRequest() {
    return { content: "", media: [], poll: undefined, visibility: "", commentControl: "" };
}
exports.CreatePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.content !== "") {
            writer.uint32(10).string(message.content);
        }
        for (const v of message.media) {
            exports.Media.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.poll !== undefined) {
            exports.Poll.encode(message.poll, writer.uint32(26).fork()).join();
        }
        if (message.visibility !== "") {
            writer.uint32(34).string(message.visibility);
        }
        if (message.commentControl !== "") {
            writer.uint32(42).string(message.commentControl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.media.push(exports.Media.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.poll = exports.Poll.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.visibility = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.commentControl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            media: globalThis.Array.isArray(object?.media) ? object.media.map((e) => exports.Media.fromJSON(e)) : [],
            poll: isSet(object.poll) ? exports.Poll.fromJSON(object.poll) : undefined,
            visibility: isSet(object.visibility) ? globalThis.String(object.visibility) : "",
            commentControl: isSet(object.commentControl) ? globalThis.String(object.commentControl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.media?.length) {
            obj.media = message.media.map((e) => exports.Media.toJSON(e));
        }
        if (message.poll !== undefined) {
            obj.poll = exports.Poll.toJSON(message.poll);
        }
        if (message.visibility !== "") {
            obj.visibility = message.visibility;
        }
        if (message.commentControl !== "") {
            obj.commentControl = message.commentControl;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePostRequest();
        message.content = object.content ?? "";
        message.media = object.media?.map((e) => exports.Media.fromPartial(e)) || [];
        message.poll = (object.poll !== undefined && object.poll !== null) ? exports.Poll.fromPartial(object.poll) : undefined;
        message.visibility = object.visibility ?? "";
        message.commentControl = object.commentControl ?? "";
        return message;
    },
};
function createBaseCreatePostResponse() {
    return { message: "" };
}
exports.CreatePostResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePostResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePostResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePostResponse();
        message.message = object.message ?? "";
        return message;
    },
};
exports.PostServiceService = {
    createPost: {
        path: "/social.post.v1.PostService/CreatePost",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreatePostRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreatePostRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CreatePostResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CreatePostResponse.decode(value),
    },
};
exports.PostServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.PostServiceService, "social.post.v1.PostService");
function isSet(value) {
    return value !== null && value !== undefined;
}
